version: '3.8'

services:
  # Original MNIST Classifier App
  app:
    build:
      context: ../app
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - MODEL_API_URL=http://model-service:8000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=mnist
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      model-service:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - mnist-network
    restart: unless-stopped

  # Sequence Prediction App
  app-sequence:
    build:
      context: ../app_sequence
      dockerfile: Dockerfile
    ports:
      - "8502:8502"
    environment:
      - MODEL_API_URL=http://model-service:8000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=mnist
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    depends_on:
      model-service:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - mnist-network
    restart: unless-stopped

  # Shared Model Service (serves both apps)
  model-service:
    build:
      context: ../models
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=mnist
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - MODEL_PATH=/app/checkpoints/mnist_model.pt
    volumes:
      - model-checkpoints:/app/checkpoints
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mnist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Shared Database with automatic migration
  db:
    build:
      context: ../db
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mnist
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../db/migrations:/docker-entrypoint-initdb.d/migrations:ro
    networks:
      - mnist-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Nginx for Original App
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_started
      model-service:
        condition: service_healthy
    networks:
      - mnist-network
    restart: unless-stopped

  # Nginx for Sequence App
  nginx-sequence:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      app-sequence:
        condition: service_started
      model-service:
        condition: service_healthy
    networks:
      - mnist-network
    restart: unless-stopped

networks:
  mnist-network:
    driver: bridge

volumes:
  postgres-data:
  model-checkpoints:
